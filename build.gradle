plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.doroshenko.serhey.lib'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    set('bouncycastleVersion', '1.68')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    enabled = true
}

java {
    withJavadocJar()
    withSourcesJar()
}

bootJar {
    enabled = false
}

dependencies {
    implementation('org.apache.commons:commons-lang3')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation("org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}")
    implementation("org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}")
    /* Processor */
    annotationProcessor('org.springframework.boot:spring-boot-autoconfigure-processor')
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    /* Test */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            credentials {
                username = findProperty('gitHubUsername') ?: System.getenv('GIT_HUB_USR')
                password = findProperty('gitHubPassword') ?: System.getenv('GIT_HUB_PSW')
            }
            url = uri("https://maven.pkg.github.com/spring-cloud-portfolio/core-lib-starter")
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        maven(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from(components.java)
            versionMapping {
                //noinspection GroovyAssignabilityCheck
                usage('java-api') {
                    //noinspection GroovyAssignabilityCheck
                    fromResolutionOf('runtimeClasspath')
                }
                //noinspection GroovyAssignabilityCheck
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
